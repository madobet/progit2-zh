=== 关于版本控制

(((version control)))
什么是“版本控制”？
记录一个或若干文件内容变化，以便查阅特定版本修订情况的系统。
本书例子对软件源码作版本控制，但是实际上可以对任何类型的文件进行版本控制。

为什么使用版本控制？（略）

==== 本地版本控制系统

(((version control,local)))
在 Git 之前已经有了许多种本地版本控制系统，大多采用某种简单数据库记录文件历次更新差异。

.本地版本控制.
image::images/local.png[本地版本控制图解]

其中最流行的一种叫 RCS，现在依然在使用。
Mac OS X 系统上安装了开发者工具包之后，也可以使用 `rcs` 命令。
RCS 工作原理是在硬盘上保存补丁集（补丁是指文件修订前后的变化）；通过应用若干或所有补丁，可以计算出各个版本的文件内容。

==== 集中版本控制系统

(((version control,centralized)))
为让不同系统的开发者协同工作，诞生了集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS）。
一些例子如 CVS、Subversion 以及 Perforce，都由一个单一的服务器集中管理、保存所有文件的修订版本，大家通过客户端连到这台服务器，取出新文件或提交更新。(((CVS)))(((Subversion)))(((Perforce)))

.集中化的版本控制.
image::images/centralized.png[集中化的版本控制图解]

CVCS的优点（特别相对于本地 VCS）：

每个人可以一定程度上看到项目中的其他人正在做什么。

管理员可以轻松掌控每个开发者的权限，并且管理一个 CVCS 比在客户端上维护本地数据库容易。

CVCS的缺点：

中央服务器的单点故障。

如果宕机一小时，那么这段时间内没人能提交更新，更不要说协同工作了。

如果中心数据库磁盘损坏又没有备份，会丢失所有数据，包括项目整个历史，只剩下各客户端本地的快照。

本地版本控制系统也存在类似问题。
只要整个项目保存在单一位置，就有丢失所有历史记录的风险。

==== 分布式版本控制系统

(((version control,distributed)))
分布式版本控制系统（Distributed Version Control System，简称 DVCS）。
在诸如 Git、Mercurial、Bazaar 以及 Darcs 等系统中，客户端不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。
从而不论哪个服务器发生故障都可以用任何一个镜像的本地仓库恢复。
每一次的克隆（clone）操作，实际上都是一次对代码仓库的完整备份。

.分布式版本控制.
image::images/distributed.png[分布式版本控制图解]

进一步，许多这类系统可以和若干不同的远端代码仓库交互，不同工作小组的人可以分别在同一个项目内协作。
可以根据需要设定不同的协作流程，比如层次模型式的工作流。在集中式系统中这是实现不了的。
