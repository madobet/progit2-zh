=== Git 基础

尽管命令形式上相近，但 Git 在保存和对待各种信息时与其它 CVS 有很大差异。(((Subversion)))(((Perforce)))

==== 直接记录快照，而不是差异比较

概念上，大部分其它系统以 *文件变更列表* 方式存储信息。
这类系统（CVS、Subversion、Perforce、Bazaar 等）将保存的信息看作 一组基本文件和每个文件随时间逐步累积的差异。

.存储每个文件与初始版本的差异.
image::images/deltas.png[存储每个文件与初始版本的差异。]

不同的是 Git 把数据看作是小型文件系统的一组快照。
每次提交更新或在 Git 中保存项目状态时，对当时的全部文件制作一个快照并保存这个快照的索引。
如果文件没有修改，Git 不重新存储文件，只保留一个链接指向之前存储的文件。
Git 对待数据更像是一个 *快照流*。

.存储项目随时间改变的快照.
image::images/snapshots.png[Git 存储项目随时间改变的快照。]

这是 Git 与几乎所有其它版本控制系统的重要区别。
Git 更像一个小型文件系统，提供了许多以此为基础构建的超强工具，而不只是一个简单的 VCS。
稍后我们在<<ch03-git-branching#ch03-git-branching>>讨论 Git 分支管理时，将探究这种方式对待数据所能获得的益处。

==== 几乎所有操作本地执行

Git 中的绝大多数操作只需要访问本地文件和资源，不需要网络上其它计算机信息。
因为本地磁盘上有项目完整历史，所以大部分操作看起来瞬间完成。

浏览项目历史，Git 不需外连到服务器去，直接从本地数据库中读取。
如果你想查看当前版本与一个月前的版本之间引入的修改，Git 会查找到一个月前的文件做一次本地的差异计算，而不用 由远程服务器处理 或 从远程服务器拉回旧版本文件到本地处理。

这也意味着你离线或者没有 VPN 时，几乎可以进行任何操作。

==== Git 保证完整性

Git 中所有数据在存储前都计算校验和，然后以校验和来引用。
这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。
Git 能发现传送过程中丢失的信息或损坏的文件。

Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。(((SHA-1)))
是用 Git 中文件的内容或目录结构计算出来的 40 个十六进制字符（0-9 和 a-f）组成的字符串，类似于这样：

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Git 经常用到这种哈希值，比如数据库中保存的信息都是用文件内容的哈希值而不是文件名来索引。

==== Git 只添加数据

Git 的操作几乎只往数据库中增加数据。
很难让 Git 执行不可逆操作或清除数据。
未提交（commit）更新时有可能丢失或弄乱修改的内容；但一旦提交就难以丢失数据，特别是如果定期的送数据库到其它仓库的话。

深度探讨 Git 数据保存及恢复，参考<<ch02-git-basics#r_undoing>>。

==== 三种状态

Git 中的文件有三种状态：已提交（committed）、已修改（modified）和已暂存（staged）。
已提交表示数据已安全保存在本地数据库中。
已修改表示修改了文件，但还没保存到数据库中。
已暂存表示对一个已修改文件的当前版本做了标记，让它包含在下次提交的快照中。

三种状态分别对应 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。

.工作目录、暂存区域以及 Git 仓库.
image::images/areas.png[工作目录、暂存区域以及 Git 仓库。]

Git 仓库目录保存项目的 元数据 和 对象数据库。

工作目录是对项目的某个版本独立提取出来的内容。
从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上使用或修改。

暂存区域是一个文件，保存下次将提交的文件列表信息，一般在 Git 仓库目录中。
有时候也被称作“索引”，不过一般还是叫暂存区域。

基本的 Git 工作流程如下：

1. 在工作目录中修改文件。
2. 暂存文件，将文件的快照放入暂存区域。
3. 提交更新，找到暂存区域的文件，将快照永久性存到 Git 仓库目录。

<<ch02-git-basics#ch02-git-basics>>一章进一步介绍了这些状态的细节。并且根据文件状态实施后续操作，以及怎样跳过暂存直接提交。
