[[r_first_time]]
=== 初次运行 Git 的配置

安装后定制 Git 环境，每台计算机上只需配置一次，程序升级时保留配置信息。

Git 自带 `git config` 的工具帮助设置控制 Git 外观和行为的配置变量。(((git commands, config)))
这些变量存储在三个不同的位置：

1. `/etc/gitconfig` 文件: 系统上每一个用户及仓库的通用配置。
  `git config` 带上 `--system` 选项时读写这个配置文件。
2. `~/.gitconfig` 或 `~/.config/git/config` 文件：只针对当前用户。
  `git config` 带上 `--global` 选项时读写这个配置文件。
3. 当前仓库的 Git 目录中的 `config` 文件（即 `.git/config`）：针对该仓库。

下一级别覆盖上一级别的配置。比如， `.git/config` 配置变量覆盖 `/etc/gitconfig` 的配置变量。

Windows 下 Git 会查找 `$HOME` 目录下（一般是 `C:\Users\$USER`）的 `.gitconfig` 文件。
Git 同样也会寻找 `/etc/gitconfig` 文件，但只限于 MSys 的根目录下，即安装 Git 时的目标位置。

==== 配置用户信息

安装完 Git 的第一件事是设置 用户名 与 邮箱。
每一个 Git 的提交都会使用这些信息并写入到每一次提交中，不可更改：

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

还记得 `--global` 选项的意思吗？
当你想针对特定项目使用不同 用户名 与 邮箱 时，可在对应项目目录下运行没有 `--global` 选项的命令进行配置。

很多 GUI 工具都会在第一次运行时帮助你配置这些信息。

==== 设置文本编辑器

用户信息设置完毕后配置默认文本编辑器。用在 Git 需要输入信息时。
如果未配置，Git 使用操作系统默认的文本编辑器（如 Vim）。
如果使用不同的文本编辑器（如 Emacs），可以：

[source,console]
----
$ git config --global core.editor emacs
----

==== 检查配置信息

使用 `git config --list` 可以列出所有 Git 当前找到的配置。

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

由于 Git 会从不同的文件中读取同一个配置（如 `/etc/gitconfig` 与 `~/.gitconfig`）所以你可能会看到重复的变量名，
Git 会使用找到的每一个变量的最后一个配置。

`git config <key>`：(((git commands, config))) 可以检查 Git 的单独一项配置

[source,console]
----
$ git config user.name
John Doe
----
