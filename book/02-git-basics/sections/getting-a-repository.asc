[[r_getting_a_repo]]
=== 获取 Git 仓库

两种方法：

1. 从现有项目或目录创建 Git 仓库

2. 从服务器克隆现有 Git 仓库

==== 在现有目录中初始化仓库

如果想使用 Git 对现有项目进行管理，进入该项目目录并输入：

[source,console]
----
$ git init
----

Git 会创建一个叫 `.git` 的目录，里面含有初始化的 Git 仓库的所有必须文件。初始化完成后，项目里的文件还没有被“跟踪”。
(参见 <<ch10-git-internals#ch10-git-internals>> 来了解更多关于到底 `.git` 文件夹中包含了哪些文件的信息。)(((git commands, init)))

现在开始跟踪这些文件并提交（`git add` 对指定文件进行跟踪，`git commit` 进行提交）：

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

现在我们已经得到了一个实际维护（或者说是跟踪）着若干个文件的 Git 仓库。

[[r_git_cloning]]
==== 克隆现有的仓库

如果你对其它的 VCS 系统（比如说 Subversion）很熟悉，请留心一下你所使用的命令是"clone"而不是"checkout"。
这是 Git 区别于其它版本控制系统的一个重要特性，Git 克隆 Git 仓库服务器上几乎所有数据，而不仅仅复制完成工作所需要文件。
执行 `git clone` 时候，默认配置远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。
如果服务器的磁盘坏掉了，通常可以使用任何一个克隆下来的用户端来重建
（虽然可能会丢失某些服务器端的挂钩设置，但是所有版本的数据仍在，详见 <<ch04-git-server#r_git_on_the_server>> ）。

命令格式是 `git clone [url]` 。(((git commands, clone)))
比如，克隆 Git 的可链接库 libgit2：

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

当前目录会创建一个名为 “libgit2” 的目录，远程仓库拉取下所有数据会放入这个目录的 `.git` 文件夹中，然后从 `.git` 中读取最新版本的文件的拷贝。

如果克隆远程仓库的时候想用自定义的本地仓库名：

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Git 支持多种数据传输协议。
上面使用的是 `https://` 协议，不过也可以使用 `git://` 协议或者 SSH，比如 `user@server:path/to/repo.git` 。
<<ch04-git-server#r_git_on_the_server>> 介绍所有协议在服务器端的配置使用及各方式间利弊。
