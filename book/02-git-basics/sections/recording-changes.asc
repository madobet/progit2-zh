=== 记录每次更新到仓库

接下来，对这些文件做些修改，完成了一个阶段的目标之后，提交本次更新到仓库。

工作目录下的每一个文件不外乎两种状态：已跟踪或未跟踪。
已跟踪指被纳入 VCS 的文件，上一次快照中有它们的记录，它们的状态可能处于未修改，已修改或已放入暂存区。
工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。

编辑过后文件变成已修改。
逐步将这些修改过的文件放入暂存区，然后提交。总结一下，Git 文件生命周期如下：

.文件的状态变化周期
image::images/lifecycle.png[Git 下文件生命周期图。]

[[r_checking_status]]
==== 检查当前文件状态

查看哪些文件处于什么状态可用 `git status` 命令。(((git commands, status)))

举个例子，这样的输出：

[source,console]
----
$ git status
On branch master
nothing to commit, working directory clean
----

说明：

1. 当前工作目录相当干净，也即所有已跟踪文件在上次提交后都未被更改

2. 当前目录下没有任何处于未跟踪状态的新文件，否则 Git 会列出来

3. 当前所在分支，以及这个分支和远程服务器上对应的分支没有偏离（当前分支名是 “master”，这是默认的分支名）
 <<ch03-git-branching#ch03-git-branching>>  会详细讨论分支和引用。

现在我们在项目下创建一个 README 文件。

这时候 `git status` 会提示有一个新的未跟踪文件：

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

状态报告说新建的 README 文件出现在 `Untracked files` 下面。
除非明确要求，否则 Git 不会自动跟踪未跟踪的文件。
这样设计可以防止包含编译生成的二进制文件或其它不想被跟踪的文件。

[[r_tracking_files]]
==== 跟踪新文件

`git add` 命令可以跟踪一个新文件：(((git commands, add)))

[source,console]
----
$ git add README
----

此时再运行 `git status` 会看到 README 已被跟踪并处于暂存状态：

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

在 `Changes to be committed` 这行下面的内容处于已暂存状态。
如果此时提交，那么这个文件当前的版本将被留存在历史记录中。
我们之前使用 `git init` 后就运行了 `git add (files)` 命令，开始跟踪当前目录下的文件。(((git commands, init)))(((git commands, add)))
`git add` 命令使用 文件 或 目录的路径 作为参数；如果参数是目录的路径，这个命令会递归地跟踪目录下的所有文件。

==== 暂存已修改文件

假设修改了 `CONTRIBUTING.md` （一个已被跟踪的文件）然后运行 `git status` 命令，会看到：

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

文件 `CONTRIBUTING.md` 出现在 `Changes not staged for commit` 这行下，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。
`git add` 是个多功能命令：可以用来跟踪新文件，或把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。
把这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。(((git commands, add)))

现在运行 `git add` 将"CONTRIBUTING.md"放到暂存区，然后看看 `git status` 的输出：

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

现在两个文件都已暂存，下次提交时会一并记录到仓库。
假设此时我们又在 `CONTRIBUTING.md` 里加了条注释，重新编辑保存，再运行 `git status` ：

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

`CONTRIBUTING.md` 文件现在同时出现在暂存区和非暂存区。
这是因为 Git 只暂存了刚才运行 `git add` 命令时的版本。
如果现在立刻提交，`CONTRIBUTING.md` 的版本会是最后一次运行 `git add` 命令时的版本，
而不是当前这个添加了注释后保存的版本。
所以我们需要再次运行 `git add` 把最新的版本重新暂存：

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

==== 状态简览

`git status` 命令的输出十分详细，但用语有些繁琐。
如果你使用 `git status -s` 命令或 `git status --short` 命令，你将得到一种更为紧凑的格式输出。
运行 `git status -s` ，状态报告输出如下：

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

新添加的未跟踪文件前面有 `??` 标记；
新添加到暂存区中的文件前面有 `A` 标记；
修改过的文件前面有 `M` 标记。
`M` 有两个可以出现的位置，右边的 `M` 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 `M` 表示该文件被修改了并放入了暂存区。
例如，上面的状态报告显示：
`README` 文件在工作区被修改了但还没有把修改后的文件放入暂存区,
`lib/simplegit.rb` 文件被修改了并将修改后的文件放入了暂存区。
`Rakefile` 在工作区被修改并提交到暂存区后又在工作区中被修改了，
所以有两个 `M` 标记，表明在 暂存区 和 工作区 都有这个文件的修改记录。

[[r_ignoring]]
==== 忽略文件

可以创建一个名为 `.gitignore` 的文件，在其中列出要忽略的 _文件模式_ ，让 Git 不要管理这些文件。

一个实际的例子：

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

第一行让 Git 忽略所有以 `.o` 或 `.a` 结尾的文件（一般这类对象文件和存档文件都是编译过程中出现的）。
第二行让 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。
此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。
要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。

文件 `.gitignore` 的格式规范如下：

*  所有空行或者以 `＃` 开头的行都会被 Git 忽略（也即注释）。
*  可以使用标准的 glob 模式匹配。
*  匹配模式可以以（`/`）开头防止递归。
*  匹配模式可以以（`/`）结尾指定目录。
*  要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（`!`）取反。

所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。
星号（`*`）匹配零个或多个任意字符；`[abc]` 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（`?`）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 `[0-9]` 表示匹配所有 0 到 9 的数字）。
使用两个星号（`*`) 表示匹配任意中间目录，比如 `a/**/z` 可以匹配 `a/z` , `a/b/z` 或 `a/b/c/z` 等。

一个 .gitignore 文件的例子：

[source]
----
# no .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in the build/ directory
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory
doc/**/*.pdf
----

[TIP]
====
GitHub 上有十分详细的针对数十种项目及语言的 `.gitignore` 文件列表，你可以在 https://github.com/github/gitignore[] 找到它.
====

[[r_git_diff_staged]]
==== 查看已暂存和未暂存的修改

`git status` 输出简单的报告，如果想知道具体的修改可以用 `git diff` 命令。(((git commands, diff)))
git diff` 通过文件补丁格式显示具体的修改行为。

假设 README 文件已经修改并暂存，`CONTRIBUTING.md` 文件修改但未暂存，
运行 `git status` ：

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

用 `git diff` 查看尚未暂存的文件更新了哪些部分：

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

此命令比较工作目录中当前文件和暂存区域快照之间的差异，
也就是修改之后还没有暂存起来的变化内容。

查看已暂存的将要添加到下次提交里的内容，可以用 `git diff --cached` 命令。
Git 1.6.1 及更高版本有一个相同效果的命令 `git diff --staged` （更好记）

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

git diff 只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。
所以有时候你一下子暂存了所有更新过的文件后，运行 `git diff` 后却什么也没有，就是这个原因。

像之前，暂存 `CONTRIBUTING.md` 后再编辑，运行 `git status` 会看到暂存前后的两个版本。
如果我们的环境（终端输出）看起来如下：

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

现在运行 `git diff` 看暂存前后的变化：

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

然后用 `git diff --cached` 查看已经暂存起来的变化：（--staged 和 --cached 是同义词）

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOTE]
.Git Diff 的插件版本
====
本书使用 `git diff` 分析文件差异。
但也可以用 `git difftool` 命令图形化调用 Araxis ，emerge 或 vimdiff 等软件输出 diff 分析结果。
使用 `git difftool --tool-help` 查看系统支持哪些 Git Diff 插件。
====

[[r_committing_changes]]
==== 提交更新

现在的暂存区域已经准备妥当可以提交了。
在此之前，请一定要确认还有什么修改过的或新建的文件还没有 `git add` 过，否则提交的时候不会记录这些还没暂存起来的变化。
这些修改过的文件只保留在本地磁盘。
所以，每次准备提交前，先用 `git status` 看下，是不是都已暂存起来了，(((git commands, status)))
然后再运行提交命令 `git commit`：(((git commands, commit)))

[source,console]
----
$ git commit
----

这种方式会启动文本编辑器以便输入本次提交的说明。
（默认会启用 shell 的环境变量 `$EDITOR` 所指定的软件，一般都是 vim 或 emacs。当然也可以按照 <<ch01-introduction#ch01-introduction>> 介绍的方式，使用 `git config --global core.editor` 命令设定你喜欢的编辑软件。）(((editor, changing default)))(((git commands, config)))

编辑器会显示类似下面的文本信息（本例选用 Vim 的屏显方式展示）：

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

可以看到，默认的提交消息包含最后一次运行 `git status` 的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。
你完全可以去掉这些注释行，不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。
（如果想要更详细的对修改了哪些内容的提示，可以用 `-v` 选项，这会将你所做的改变的 diff 输出放到编辑器中从而使你知道本次提交具体做了哪些修改。）
退出编辑器时，Git 会丢掉注释行，用你输入提交附带信息生成一次提交。

另外，你也可以在 `commit` 命令后添加 `-m` 选项，将提交信息与命令放在同一行，如下所示：

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

好，现在你已经创建了第一个提交！
可以看到，提交后它会告诉你，当前是在哪个分支（`master`）提交的，本次提交的完整 SHA-1 校验和是什么（`463dc4f`），以及在本次提交中，有多少文件修订过，多少行添加和删改过。

请记住，提交时记录的是放在暂存区域的快照。
任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。
每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。

==== 跳过使用暂存区域

(((staging area, skipping)))
尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。
Git 提供了一个跳过使用暂存区域的方式，
只要在提交的时候，给 `git commit` 加上 `-a` 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 `git add` 步骤：

[source,console]
----
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

看到了吗？提交之前不再需要 `git add` 文件“CONTRIBUTING.md”了。

[[r_removing_files]]
==== 移除文件

(((files, removing)))
要移除某个文件，用 `git rm` 从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。
命令会连带从工作目录删除指定文件。

如果只是简单地从工作目录中手工删除文件，运行 `git status` 时就会在 “Changes not staged for commit” 部分（也就是 _未暂存清单_）看到：

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

然后再运行 `git rm` 记录此次移除文件的操作：

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

下一次提交时，该文件就不再纳入版本管理。
如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 `-f`（译注：即 force 的首字母）。
这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。

另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。
换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。
当你忘记添加 `.gitignore` 文件，不小心把一个很大的日志文件或一堆 `.a` 这样的编译生成文件添加到暂存区时，这一做法尤其有用。
为达到这一目的，使用 `--cached` 选项：

[source,console]
----
$ git rm --cached README
----

`git rm` 命令后面可以列出文件或者目录的名字，也可以使用 `glob` 模式。
比方说：

[source,console]
----
$ git rm log/\*.log
----

注意星号 `*` 之前的反斜杠 `\`，
Git 用自己的文件模式扩展方式匹配，所以不用 shell 展开。
此命令删除 `log/` 目录下扩展名为 `.log` 的所有文件。
类似的：

[source,console]
----
$ git rm \*~
----

该命令为删除以 `~` 结尾的所有文件。

[[r_git_mv]]
==== 移动文件

(((files, moving)))
不像其它的 VCS 系统，Git 并不显式跟踪文件移动操作。
如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。
不过 Git 非常聪明，它会推断出究竟发生了什么，至于具体是如何做到的，我们稍后再谈。

既然如此，当你看到 Git 的 `mv` 命令时一定会困惑不已。
要在 Git 中对文件改名，可以这么做：

[source,console]
----
$ git mv file_from file_to
----

它会恰如预期般正常工作。
实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

其实，运行 `git mv` 就相当于运行了下面三条命令：

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式结果都一样。
两者唯一的区别是，`mv` 是一条命令而另一种方式需要三条命令，直接用 `git mv` 轻便得多。
不过有时候用其他工具批处理改名的话，要记得在提交前删除老的文件名，再添加新的文件名。
